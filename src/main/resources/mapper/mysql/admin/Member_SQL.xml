<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member"> 
  	
	 <!-- 로그인 사용자 정보 -->
    <select id="UI_IdCheck" parameterType="String" resultType="USER">
        SELECT *
        FROM   T_USERINFO    	
    	WHERE  UI_ID = #{UI_ID}
    </select>	
    
    <select id="UI_getData" parameterType="String" resultType="hashmap">
    	SELECT 		M.*
					, UI_ID NAME
					, CASE UIA_DIVISION
						WHEN 'A' THEN S.UIA_KEYNO
						WHEN 'U' THEN (
							SELECT	UIA_KEYNO
							FROM	T_USERINFO_AUTHORITY 
							WHERE	UIA_KEYNO = S.UIA_MAINKEY
						)
						ELSE ''
					END UIA_MAINKEY
					, S.UIA_KEYNO
					, UIA_NAME
					, UIA_DIVISION
		FROM   		T_USERINFO M
		LEFT JOIN  	T_USERINFO_MEMBER_AUTHORITY U
		ON 			M.UI_KEYNO = U.UI_KEYNO
		LEFT JOIN 	T_USERINFO_AUTHORITY S
		ON 			U.UIA_KEYNO = S.UIA_KEYNO    	
    	WHERE  		UI_ID = #{UI_ID}
    </select>
    
  	
  	<!-- 로그인 사용자 정보 -->
     <select id="selectUserInfo" parameterType="String" resultType="USER">
        <![CDATA[
			SELECT		S.UIA_NAME
						, S.UIA_KEYNO
						, M.*
						, DATE_FORMAT(IFNULL(M.UI_LOCKDATE, NOW()), '%Y-%m-%d %H:%i:%s') LOCKDATE
			FROM		T_USERINFO M
			LEFT JOIN  	T_USERINFO_MEMBER_AUTHORITY U
			ON 			M.UI_KEYNO = U.UI_KEYNO
			LEFT JOIN 	T_USERINFO_AUTHORITY S
			ON 			U.UIA_KEYNO = S.UIA_KEYNO
			WHERE 		UI_ID = #{UI_ID} 
        ]]>
    </select>
    
    <!-- 마이그레이션 로그인 확인  -->
    <select id="jact_user_login" parameterType="USER" resultType="USER">
    	SELECT * FROM T_USERINFO WHERE UI_ID = #{UI_ID} AND UI_MB_PASSWORD = PASSWORD(#{UI_MB_PASSWORD})
    </select>
  	
  	
  	<!-- 회원 목록  - 관리자 메인 -->
	<select id="UI_selectAdminMain" resultType="USER">
 		 SELECT (SELECT COUNT(*) FROM T_USERINFO) UI_TOTAL
 		 		,(SELECT COUNT(*) FROM T_USERINFO WHERE UI_DELYN = 'Y') UI_TOTAL_LEAVE
 		 		,CASE WHEN UI_DELYN = 'Y' THEN '탈퇴회원' ELSE GROUP_CONCAT(UIA_NAME) END UIA_NAME
 		 		,GROUP_CONCAT(S.UIA_KEYNO) UIA_KEYNO
 		 		,M.*
		 FROM 	T_USERINFO M
         LEFT JOIN T_USERINFO_MEMBER_AUTHORITY A
         ON	M.UI_KEYNO = A.UI_KEYNO
         LEFT JOIN T_USERINFO_AUTHORITY S
         ON	A.UIA_KEYNO	=	S.UIA_KEYNO
		 GROUP BY UI_KEYNO
		 ORDER BY UI_REGDT DESC
		 LIMIT 5
    </select>
  	
  	
  	
  	<sql id="UI_getListBody">
		FROM (
			SELECT	B.*
					, @ROWNUM:=@ROWNUM+1 as COUNT
			FROM (
				SELECT 
					  IFNULL(GROUP_CONCAT(UIA_NAME),'') UIA_NAME
					, M.UI_KEYNO
					, M.UI_ID
					, M.UI_NAME
					, M.UI_EMAIL
					, M.UI_PHONE
					, LEFT(M.UI_LASTLOGIN,19) AS UI_LASTLOGIN
					, LEFT(M.UI_REGDT,19) AS UI_REGDT
					, IF( M.UI_AUTH_YN = 'Y', 'O','X') AS UI_AUTH_YN
					<![CDATA[
		    		, CASE 
		    			WHEN M.UI_DELYN = 'Y' 	THEN '탈퇴회원<br>(' || (SELECT SC_CODENM FROM T_COMMON_CODE_SUB WHERE SC_KEYNO = M.UI_DEL_REASON) || ')'
		    			WHEN M.UI_AUTH_YN = 'Y' THEN 'O' 
		    			ELSE 'X'
		    		END AUTH
		    		]]>
				 FROM 	T_USERINFO M
		         LEFT JOIN T_USERINFO_MEMBER_AUTHORITY A
		         ON	M.UI_KEYNO = A.UI_KEYNO
		         LEFT JOIN T_USERINFO_AUTHORITY S
		         ON	A.UIA_KEYNO	=	S.UIA_KEYNO
				 GROUP BY UI_KEYNO
				 ORDER BY UI_REGDT
			) B
			WHERE (@ROWNUM:=0)=0
		)AA
		WHERE 1=1
		<if test="authority != null">
		AND		UIA_NAME IS NOT NULL
		</if>
		<if test="searchList != null">
	 	<foreach collection="searchList" item="item">
	 		<choose>
	 			<when test='item.searchIndex.equals("1")'>
 		AND		COUNT 				LIKE CONCAT( '%',#{item.searchKeyword},'%')					
	 			</when>
	 			<when test='item.searchIndex.equals("2")'>
 		AND		UI_ID				LIKE CONCAT( '%',#{item.searchKeyword},'%')					
	 			</when>
	 			<when test='item.searchIndex.equals("3")'>
 		AND		UI_NAME 			LIKE CONCAT( '%',#{item.searchKeyword},'%')					
	 			</when>
	 			<when test='item.searchIndex.equals("4")'>
 		AND		UIA_NAME			LIKE CONCAT( '%',#{item.searchKeyword},'%')					
	 			</when>
	 			<when test='item.searchIndex.equals("5")'>
 		AND		UI_REGDT 			LIKE CONCAT( '%',#{item.searchKeyword},'%')						
	 			</when>
	 			<when test='item.searchIndex.equals("6")'>
 		AND		UI_LASTLOGIN 		LIKE CONCAT( '%',#{item.searchKeyword},'%')						
	 			</when>
	 			<when test='item.searchIndex.equals("7")'>
 		AND		AUTH 				LIKE CONCAT( '%',#{item.searchKeyword},'%')						
	 			</when>
	 			<when test='item.searchIndex.equals("all")'>
 		AND (
 				COUNT 				LIKE CONCAT( '%',#{item.searchKeyword},'%') 	OR
 				UI_ID				LIKE CONCAT( '%',#{item.searchKeyword},'%') 	OR
 				UI_NAME 			LIKE CONCAT( '%',#{item.searchKeyword},'%') 	OR
 				UIA_NAME			LIKE CONCAT( '%',#{item.searchKeyword},'%') 	OR
 				UI_REGDT 			LIKE CONCAT( '%',#{item.searchKeyword},'%') 	OR
 				UI_LASTLOGIN 		LIKE CONCAT( '%',#{item.searchKeyword},'%') 	OR
 				AUTH 				LIKE CONCAT( '%',#{item.searchKeyword},'%') 	
 		)							
	 			</when>
	 			<when test='item.searchIndex.equals("authority")'>
 		AND (
 				UI_ID				LIKE CONCAT( '%',#{item.searchKeyword},'%') 	OR
 				UI_NAME 			LIKE CONCAT( '%',#{item.searchKeyword},'%')
 		)							
	 			</when>
	 		</choose>
	 	</foreach>
	 	</if>
	
	</sql>
  	
    <select id="UI_getListCnt" resultType="int">
		SELECT	COUNT(*)
		<include  refid="UI_getListBody"/>
    </select>
    
    <select id="UI_getList" resultMap="ResultMap.rownumHashMap">
    	SELECT	* 
		<include  refid="UI_getListBody"/>
		<choose>
	 		<when test="orderBy == 1">
	 		ORDER BY	COUNT ${sortDirect}
	 		</when>
	 		<when test="orderBy == 2">
	 		ORDER BY	UI_ID ${sortDirect}
	 		</when>
	 		<when test="orderBy == 3">
	 		ORDER BY	UI_NAME ${sortDirect}
	 		</when>
	 		<when test="orderBy == 4">
	 		ORDER BY	UIA_NAME ${sortDirect}
	 		</when>
	 		<when test="orderBy == 5">
	 		ORDER BY	UI_REGDT ${sortDirect}
	 		</when>
	 		<when test="orderBy == 6">
	 		ORDER BY	UI_LASTLOGIN ${sortDirect}
	 		</when>
	 		<when test="orderBy == 7">
	 		ORDER BY	AUTH ${sortDirect}
	 		</when>
	 		<otherwise>
	 		ORDER BY 	COUNT DESC
	 		</otherwise>
 		</choose>
		<if test=" recordCountPerPage != 0">
		LIMIT  	#{recordCountPerPage} OFFSET #{firstIndex} 
		</if>  
    </select>
  	
  	
  	
  	<!-- 회원 목록 -->
	<select id="UI_select" parameterType="USER" resultType="USER">
 		 SELECT  	S.UIA_KEYNO
					, S.UIA_DIVISION
					, S.UIA_NAME
					, M.*
		 FROM 		T_USERINFO M
         LEFT JOIN 	T_USERINFO_MEMBER_AUTHORITY A
         ON			M.UI_KEYNO 	= A.UI_KEYNO
         LEFT JOIN 	T_USERINFO_AUTHORITY S
         ON			A.UIA_KEYNO	=	S.UIA_KEYNO
		 WHERE 		UI_DELYN	=	'N'
		 AND	 	UI_ID		=	#{UI_ID}
    </select>
  	 
	<!-- 회원 등록 -->
	<insert id="UI_insert" parameterType="USER">
       	INSERT INTO T_USERINFO
		(
				  UI_KEYNO
				, UI_ID
				, UI_PASSWORD
				, UI_NAME
				, UI_EMAIL
				, UI_PHONE
				, UI_BIRTH
				, UI_ZENDER
				, UI_REGDT
				, UI_AUTH_YN
				, UI_REP_NAME
				, UI_MB_MAILLING
		)
		VALUES
		(
				  #{UI_KEYNO}
				, #{UI_ID}
				, #{UI_PASSWORD}
				, #{UI_NAME}
				, #{UI_EMAIL}
				, #{UI_PHONE}
				, #{UI_BIRTH}
				, #{UI_ZENDER}
				, NOW()
				, #{UI_AUTH_YN}
				, #{UI_REP_NAME}
				, #{UI_MB_MAILLING}
		)
    </insert>
    
    <update id="UI_updateUser" parameterType="USER">
    
    	UPDATE T_USERINFO
    	SET		  UI_NAME		=	#{UI_NAME}
 	   <if test='UI_EMAIL != null and UI_EMAIL != ""'>
    	         ,UI_EMAIL	    =	#{UI_EMAIL}
 	   </if>
    	         ,UI_PHONE	    =	#{UI_PHONE}
    	         ,UI_BIRTH	    =	#{UI_BIRTH}
    	         ,UI_ZENDER	    =	#{UI_ZENDER}
    	         ,UI_AUTH_YN	=	#{UI_AUTH_YN}
    	         ,UI_REP_NAME	=	#{UI_REP_NAME}
    	         ,UI_MB_MAILLING	=	#{UI_MB_MAILLING}
    	<if test='UI_PASSWORD != null and UI_PASSWORD != ""'>
    			, UI_PASSWORD	=	#{UI_PASSWORD}
    			, UI_PWD_INIT	=	'N'	
    	</if>		
    	WHERE	  UI_KEYNO		=	#{UI_KEYNO}
    </update>
    
    
    <update id="UI_delete" parameterType="USER">
   
        UPDATE T_USERINFO 
        SET    UI_DELYN='Y'
        WHERE  UI_KEYNO=#{UI_KEYNO}  
   
    </update>

	<delete id="UI_real_delete" parameterType="USER">
		DELETE FROM T_USERINFO WHERE UI_KEYNO=#{UI_KEYNO}
	</delete>
	<!-- 권한 삭제 -->
	<delete id="UI_deleteAuthority" parameterType="hashmap">
		DELETE FROM T_USERINFO_MEMBER_AUTHORITY
		WHERE	UI_KEYNO	=	#{UI_KEYNO}
	</delete>
	
	<!-- 권한 추가 -->
	<insert id="UI_setAuthority" parameterType="hashmap">
		INSERT INTO T_USERINFO_MEMBER_AUTHORITY
		(
			  UI_KEYNO
			, UIA_KEYNO 
		)
		VALUES
		<foreach collection="UIA_KEYNO" item="item" separator=" , ">
            (#{UI_KEYNO}, #{item})
        </foreach>
	</insert>     
	
	<!-- Email 로 임시 비밀 번호 발송 서버 비밀번호 변경 -->
	<update id="UI_updateUserTempPwd" parameterType="USER">
    	UPDATE T_USERINFO
    	SET		  UI_PASSWORD	=	#{UI_PASSWORD}	
    	WHERE	  UI_KEYNO		=	#{UI_KEYNO}
    </update>
    
    <update id="UI_updateUserInitPwd">
    	UPDATE 	T_USERINFO
    	SET		UI_PASSWORD		=	#{UI_PASSWORD}
    		  , UI_PWD_INIT		=	'N'	
    	WHERE	UI_KEYNO		=	#{UI_KEYNO}
    </update>
    
    <!-- 회원관리 설정 리스트 -->
    <select id="US_getList" resultType="hashmap">
    
    	SELECT 		*
    	FROM		T_HOME_MANAGER H
    	LEFT JOIN	T_USERINFO_SETTING U
    	ON			H.HM_KEYNO	=	U.US_TYPE
    	LEFT JOIN	T_MENU_MANAGER M
    	ON			H.HM_MN_HOMEDIV_C = M.MN_KEYNO
    	WHERE		HM_DEL_YN	=	'N'
    	ORDER BY 	HM_KEYNO
    </select>
    
    
    <!-- 회원관리 설정 DATA -->
    <select id="US_getData" resultType="USERSETTING" parameterType="String">
    
    	SELECT 		U.*
    	FROM		T_HOME_MANAGER H
    	LEFT JOIN	T_USERINFO_SETTING U
    	ON			H.HM_KEYNO	=	U.US_TYPE
    	WHERE		H.HM_TILES	=	#{HM_TILES}
    </select>
    
    
    
    <!-- 회원관리 설정 저장 -->
    <insert id="US_insertData" parameterType="USERSETTING">
    
    	INSERT INTO T_USERINFO_SETTING(
    		  US_TYPE
			, US_UIA_KEYNO
			, US_AUTH
			, US_ID_FILTER
			, US_INFO1
			, US_INFO2
    	)
    	VALUES(
			  #{US_TYPE}
			, #{US_UIA_KEYNO}
			, #{US_AUTH}
			, #{US_ID_FILTER}
			, #{US_INFO1}
			, #{US_INFO2}
		)
		ON DUPLICATE KEY UPDATE 
			  US_UIA_KEYNO	=	#{US_UIA_KEYNO}
			, US_AUTH		=	#{US_AUTH}
			, US_ID_FILTER	=	#{US_ID_FILTER}
			, US_INFO1		=	#{US_INFO1}
			, US_INFO2		=	#{US_INFO2}
    </insert>
    
    
    <select id="UI_findUserWithEmail" resultType="USER" parameterType="String">
    	SELECT 	* 
    	FROM 	T_USERINFO
    	WHERE	UI_NAME		=	#{UI_NAME}
    	AND 	UI_EMAIL	=	#{UI_EMAIL}
    	AND		UI_DELYN	=	'N' 
    </select>
    
    <!-- 아이디와 이메일 중복 체크 -->
    <select id="UI_checkIdAndEmail" resultType="String" parameterType="USER">
    	SELECT GROUP_CONCAT(result) FROM (
			SELECT 	'email' result
			FROM 	T_USERINFO
			WHERE	UI_EMAIL	=	#{UI_EMAIL}
			
			UNION
			
			SELECT 	'id' 
			FROM 	T_USERINFO
			WHERE	UI_ID	=	#{UI_ID}
		) A 
    	
    </select>
    
     <!-- 아이디 중복 체크 -->
    <select id="UI_checkId" resultType="int" parameterType="USER">
			SELECT 	COUNT(*) 
			FROM 	T_USERINFO
			WHERE	UI_ID	=	#{UI_ID}
    </select>
    
     <!-- 이메일 중복 체크 -->
    <select id="UI_checkEmail" resultType="int" parameterType="USER">
			SELECT 	count(*)
			FROM 	T_USERINFO
			WHERE	UI_EMAIL	=	#{email}
    </select>
    
    <!-- 유저 인증 -->
    <update id="UI_userSignAuth" parameterType="USER">
    	UPDATE T_USERINFO
    	SET		  UI_AUTH_YN		=	'Y'
    	WHERE	  UI_ID		=	#{UI_ID}
    </update>
    
    <!-- 유저 인증데이터 저장 -->
    <update id="UI_userSignAuthData" parameterType="USER">
    	UPDATE T_USERINFO
    	SET		  UI_AUTH_DATA		=	#{UI_AUTH_DATA}
    	WHERE	  UI_KEYNO			=	#{UI_KEYNO}
    </update>
    
    <!-- 유저 인증 확인-->
    <select id="UI_userSignAuthConfirm" parameterType="String" resultType="USER">
    	SELECT	*
    	FROM	T_USERINFO
    	WHERE 	UI_AUTH_DATA		=	#{UI_AUTH_DATA}
    </select>
    
    
    <!-- 비밀번호 변경  -->
    <update id="UI_updatePWD" parameterType="USER">
    	UPDATE 	  T_USERINFO
    	SET		  UI_PASSWORD	=	#{UI_PASSWORD}
    	WHERE	  UI_ID			=	#{UI_ID}
    </update>
    
    <update id="UI_updateLastLogin">
    -- LOG OFF
    	UPDATE 	  T_USERINFO
    	SET		  UI_LASTLOGIN	=	NOW()
    	WHERE	  UI_ID			=	#{UI_ID}
    </update>
    
     <!-- 잠금 해제 -->
    <update id="updateLockData" parameterType="USER">
	    UPDATE T_USERINFO
	    SET		UI_LOCKYN = 'N',
	    		UI_LOGIN_COUNT = 0,
	    		UI_LOCKDATE = NULL
	    WHERE	UI_KEYNO = #{UI_KEYNO}
    </update>
    
    <!-- 잠금 카운트 갱신  -->
    <update id="updateLock" parameterType="USER">
	    UPDATE T_USERINFO
	    SET		UI_LOCKYN = #{UI_LOCKYN},
	    		UI_LOGIN_COUNT = #{UI_LOGIN_COUNT},
	    		UI_LOCKDATE = NOW()
	    WHERE	UI_KEYNO = #{UI_KEYNO}
    </update>
    
    
</mapper>
 